@* @model SubmitFormViewModel

@{
    ViewData["Title"] = Model.FormTitle;
}
<link rel="stylesheet" href="~/css/form-answer.css" asp-append-version="true" />
<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-10">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">@Model.FormTitle</h4>
                </div>
                <div class="card-body">
                    @if (TempData["Error"] != null)
                    {
                        <div class="alert alert-danger">@TempData["Error"]</div>
                    }

                    <form asp-action="Submit" asp-controller="Answer" method="post">
                        <input type="hidden" name="formId" value="@Model.FormId" />
                        
                        @for (int i = 0; i < Model.Answers.Count; i++)
                        {
                            <div class="question-group mb-4 p-3 border rounded">
                                <h5 class="question-text">@(i + 1). @Model.Answers[i].QuestionText</h5>
                                
                                @if (Model.Answers[i].QuestionType == "Scale")
                                {
                                    <div class="scale-answers">
                                        <div class="btn-group btn-group-toggle d-flex flex-wrap" data-toggle="buttons">
                                            @for (int scale = 1; scale <= 10; scale++)
                                            {
                                                <label class="btn btn-outline-primary scale-option m-1">
                                                    <input type="radio" 
                                                           name="answers[@Model.Answers[i].QuestionId]" 
                                                           value="@scale" 
                                                           required 
                                                           class="scale-input">
                                                    @scale
                                                </label>
                                            }
                                        </div>
                                        <div class="scale-labels d-flex justify-content-between mt-2">
                                            <small class="text-muted">1 - Многу незадоволен</small>
                                            <small class="text-muted">10 - Многу задоволен</small>
                                        </div>
                                    </div>
                                }
                                else if (Model.Answers[i].QuestionType == "Text")
                                {
                                    <div class="text-answer">
                                        <textarea class="form-control" 
                                                  name="answers[@Model.Answers[i].QuestionId]" 
                                                  rows="4" 
                                                  maxlength="500"
                                                  placeholder="Внесете го вашиот одговор овде (макс. 500 карактери)..."
                                                  required></textarea>
                                        <small class="text-muted float-end"><span class="char-count">0</span>/500 карактери</small>
                                    </div>
                                }
                                
                                @if (!string.IsNullOrEmpty(ViewData.ModelState[$"answers[{Model.Answers[i].QuestionId}]"]?.Errors?.FirstOrDefault()?.ErrorMessage))
                                {
                                    <span class="text-danger">
                                        @ViewData.ModelState[$"answers[{Model.Answers[i].QuestionId}]"]?.Errors?.FirstOrDefault()?.ErrorMessage
                                    </span>
                                }
                            </div>
                        }
                        
                        <div class="form-group mt-4">
                            <button type="submit" class="btn btn-success btn-lg w-100">
                                <i class="fas fa-paper-plane"></i> Поднеси ги одговорите
                            </button>
                            <a href="@Url.Action("Index")" class="btn btn-secondary w-100 mt-2">
                                <i class="fas fa-arrow-left"></i> Назад кон листата
                            </a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="~/js/form-answer.js"></script> *@
@model Anketa.ViewModels.SubmitFormViewModel

@{
    ViewData["Title"] = Model.FormTitle;
}

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-10">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">@Model.FormTitle</h4>
                </div>
                <div class="card-body">
                    @if (TempData["Error"] != null)
                    {
                        <div class="alert alert-danger">@TempData["Error"]</div>
                    }

                    <form id="answerForm" asp-action="Submit" asp-controller="Answer" method="post">
                        <input type="hidden" name="formId" value="@Model.FormId" />
                        <input type="hidden" id="debugData" name="debugData" />

                        @for (int i = 0; i < Model.Answers.Count; i++)
                        {
                            <div class="question-group mb-4 p-3 border rounded">
                                <h5 class="question-text">@(i + 1). @Model.Answers[i].QuestionText</h5>

                                @if (Model.Answers[i].QuestionType == "Scale")
                                {
                                    <div class="scale-answers">
                                        <div class="btn-group btn-group-toggle d-flex flex-wrap" data-toggle="buttons">
                                            @for (int scale = 1; scale <= 10; scale++)
                                            {
                                                <label class="btn btn-outline-primary scale-option m-1">
                                                    <input type="radio"
                                                           name="answers[@Model.Answers[i].QuestionId]"
                                                           value="@scale"
                                                           required
                                                           class="scale-input"
                                                           data-question-id="@Model.Answers[i].QuestionId">
                                                    @scale
                                                </label>
                                            }
                                        </div>
                                        <div class="scale-labels d-flex justify-content-between mt-2">
                                            <small class="text-muted">1 - Многу незадоволен</small>
                                            <small class="text-muted">10 - Многу задоволен</small>
                                        </div>
                                    </div>
                                }
                                else if (Model.Answers[i].QuestionType == "Text")
                                {
                                    <div class="text-answer">
                                        <textarea class="form-control"
                                          name="answers[@Model.Answers[i].QuestionId]"
                                          rows="4"
                                          maxlength="500"
                                          placeholder="Внесете го вашиот одговор овде (макс. 500 карактери)..."
                                          required
                                          data-question-id="@Model.Answers[i].QuestionId"></textarea>
                                        <small class="text-muted float-end"><span class="char-count">0</span>/500 карактери</small>
                                    </div>
                                }
                            </div>
                        }

                        <div class="form-group mt-4">
                            <button type="submit" class="btn btn-success btn-lg w-100" id="submitBtn">
                                <i class="fas fa-paper-plane"></i> Поднеси ги одговорите
                            </button>
                            <a href="@Url.Action("Index")" class="btn btn-secondary w-100 mt-2">
                                <i class="fas fa-arrow-left"></i> Назад кон листата
                            </a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
             
        $(document).ready(function () {
            console.log("Answer form loaded successfully!");

            // Fix radio button selection tracking
            $('.scale-input').change(function () {
                var questionId = $(this).data('question-id');
                var value = $(this).val();
                console.log(`Scale answer selected - Question ${questionId}: ${value}`);

                // Visual feedback
                $(this).closest('.scale-option').removeClass('btn-outline-primary').addClass('btn-primary');
                $(this).closest('.btn-group').find('.scale-option').not(this).removeClass('btn-primary').addClass('btn-outline-primary');

                // Store the actual selected value in a hidden field for debugging
                $(`#debug-selected-${questionId}`).remove();
                $(this).closest('.question-group').append(`<input type="hidden" id="debug-selected-${questionId}" value="Q${questionId}=${value}" />`);
            });

            // Enhanced form submission with better data collection
            $('#answerForm').on('submit', function (event) {
                console.log("=== FORM SUBMISSION STARTED ===");

                // Manually collect all radio button values
                var collectedAnswers = {};
                $('.scale-input:checked').each(function() {
                    var questionId = $(this).data('question-id');
                    var value = $(this).val();
                    collectedAnswers[questionId] = value;
                    console.log(`Collected - Q${questionId}: ${value}`);
                });

                console.log("Manually collected answers:", collectedAnswers);

                // Continue with normal form submission
                var formData = new FormData(this);
                console.log("FormData entries:");
                for (var pair of formData.entries()) {
                    console.log(`  ${pair[0]} = ${pair[1]}`);
                }

                // Prevent the "leaving page" warning from interfering
                $(window).off('beforeunload');

                return true; // Allow form submission
            });

            // Remove the beforeunload handler that's causing issues
            $(window).off('beforeunload');
        });
    
        // $(document).ready(function () {
        //     console.log("Answer form loaded successfully!");
        //     console.log("Form ID: @Model.FormId");
        //     console.log("Number of questions: @Model.Answers.Count");

        //     Scale answer selection styling
        //     $('.scale-input').change(function () {
        //         var questionId = $(this).data('question-id');
        //         var value = $(this).val();
        //         console.log(`Scale answer selected - Question ${questionId}: ${value}`);

        //         $(this).closest('.scale-option').removeClass('btn-outline-primary').addClass('btn-primary');
        //         $(this).closest('.btn-group').find('.scale-option').not(this).removeClass('btn-primary').addClass('btn-outline-primary');
        //     });

        //     Character counter for text areas
        //     $('textarea').on('input', function () {
        //         var questionId = $(this).data('question-id');
        //         var length = $(this).val().length;
        //         console.log(`Text answer input - Question ${questionId}: ${length} characters`);

        //         $(this).siblings('.char-count').text(length);

        //         if (length > 450) {
        //             $(this).siblings('.text-muted').addClass('text-warning');
        //         } else {
        //             $(this).siblings('.text-muted').removeClass('text-warning');
        //         }
        //     });

        //     Initialize character counts
        //     $('textarea').each(function () {
        //         var length = $(this).val().length;
        //         $(this).siblings('.char-count').text(length);
        //     });

        //     Form submission with detailed logging
        //     $('#answerForm').on('submit', function (event) {
        //         console.log("=== FORM SUBMISSION STARTED ===");
        //         console.log("Form ID: @Model.FormId");

        //         Collect all form data
        //         var formData = new FormData(this);
        //         var answers = {};

        //         console.log("FormData entries:");
        //         for (var pair of formData.entries()) {
        //             console.log(`  ${pair[0]} = ${pair[1]}`);
        //             if (pair[0].startsWith('answers[')) {
        //                 answers[pair[0]] = pair[1];
        //             }
        //         }

        //         console.log("Parsed answers:", answers);

        //         Validate form
        //         var isValid = true;
        //         var unansweredQuestions = [];

        //         $('.question-group').each(function () {
        //             var hasAnswer = false;
        //             var questionType = $(this).find('.scale-input').length > 0 ? 'scale' : 'text';
        //             var questionId = $(this).find('.scale-input, textarea').data('question-id');

        //             if (questionType === 'scale') {
        //                 hasAnswer = $(this).find('.scale-input:checked').length > 0;
        //             } else {
        //                 hasAnswer = $(this).find('textarea').val().trim().length > 0;
        //             }

        //             if (!hasAnswer) {
        //                 isValid = false;
        //                 unansweredQuestions.push(questionId);
        //                 $(this).addClass('border-danger');
        //                 console.log(`Missing answer for question ${questionId}`);
        //             } else {
        //                 $(this).removeClass('border-danger');
        //             }
        //         });

        //         if (!isValid) {
        //             console.log(`Form validation failed. Unanswered questions: ${unansweredQuestions.join(', ')}`);
        //             alert('Ве молам одговорете на сите прашања пред да поднесете.');
        //             event.preventDefault();
        //             return false;
        //         }

        //         console.log("Form validation passed. Submitting...");

        //         Add debug data to form
        //         var debugInfo = {
        //             timestamp: new Date().toISOString(),
        //             formId: @Model.FormId,
        //             questionCount: @Model.Answers.Count,
        //             answers: answers
        //         };
        //         $('#debugData').val(JSON.stringify(debugInfo));

        //         Show loading state
        //         $('#submitBtn').prop('disabled', true).html('<i class="fas fa-spinner fa-spin"></i> Поднесувам...');

        //         console.log("Form submission proceeding...");
        //         return true;
        //     });

        //     Log when form inputs change
        //     $('input, textarea').on('change', function() {
        //         var questionId = $(this).data('question-id');
        //         var value = $(this).val();
        //         var type = $(this).is('textarea') ? 'text' : 'scale';
        //         console.log(`Input changed - Question ${questionId} (${type}): ${value}`);
        //     });

        //     Log page unload (if user tries to leave)
        //     $(window).on('beforeunload', function() {
        //         console.log("User attempting to leave the page. Form data might be lost.");
        //     });
        // });

        // Global error handler
        // window.addEventListener('error', function(e) {
        //     console.error('Global error:', e.error);
        // });
    // </script>

    <style>
        .question-group {
            background-color: #f8f9fa;
            border-left: 4px solid #007bff;
            transition: all 0.3s ease;
        }

            .question-group:hover {
                background-color: #e9ecef;
            }

        .question-text {
            color: #2c3e50;
            font-weight: 600;
            margin-bottom: 15px;
        }

        .scale-option {
            min-width: 45px;
            text-align: center;
        }

            .scale-option:hover {
                transform: translateY(-2px);
                box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            }

        .btn-primary {
            background-color: #007bff;
            border-color: #007bff;
        }

        .border-danger {
            border-left-color: #dc3545 !important;
            border-color: #dc3545 !important;
        }

        .char-count {
            font-weight: bold;
        }

        .text-warning {
            color: #ffc107 !important;
            font-weight: bold;
        }

        .card {
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            border: none;
            border-radius: 10px;
        }

        .card-header {
            border-radius: 10px 10px 0 0 !important;
        }

        .btn-success {
            background-color: #28a745;
            border-color: #28a745;
            padding: 12px;
            font-size: 18px;
            font-weight: 600;
        }

            .btn-success:hover {
                background-color: #218838;
                border-color: #1e7e34;
                transform: translateY(-1px);
            }

            .btn-success:disabled {
                background-color: #6c757d;
                border-color: #6c757d;
                transform: none;
            }
    </style>
}